version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: gft_postgres
    environment:
      POSTGRES_DB: chatgft
      POSTGRES_USER: chatgftuser
      POSTGRES_PASSWORD: chatgftpass184848
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - chat-gft_network
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: gft_minio
    environment:
      MINIO_ROOT_USER: gftuser
      MINIO_ROOT_PASSWORD: Bobr_Dobriy
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    networks:
      - chat-gft_network
    restart: unless-stopped

  backend:
    build:
      context: .
      dockerfile: ./backend.Dockerfile
    container_name: gft_backend
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=chatgft
      - DB_USER=chatgftuser
      - DB_PASSWORD=chatgftpass184848
      - SECRET_KEY=${SECRET_KEY}
      - BOT_TOKEN=${BOT_TOKEN}
      - WEBHOOK_SECRET_TOKEN=${WEBHOOK_SECRET_TOKEN}
      - WEBHOOK_URL=${WEBHOOK_URL}
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=Bobr_Dobriy
      - MINIO_BUCKET=chat-gft
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - minio
    networks:
      - chat-gft_network
    restart: unless-stopped

  frontend:
    build:
      context: .
      dockerfile: ./frontend.Dockerfile
    container_name: gft_frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - chat-gft_network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: gft_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot
    depends_on:
      - frontend
      - backend
    networks:
      - chat-gft_network
    restart: unless-stopped

  # Certbot для автоматического получения SSL
  certbot:
    image: certbot/certbot
    container_name: gft_certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email chatGFT@mail.ru --agree-tos --no-eff-email -d chatGFT.pro
    depends_on:
      - nginx
      
  llm_service:
    build:
      context: .
      dockerfile: ./llm-service.Dockerfile
    container_name: gft_llm_service
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_BASE_URL=https://openrouter.ai/api/v1
      - DATABASE_URL=postgresql://chatgftuser:chatgftpass184848@postgres:5432/chatgft
    depends_on:
      - postgres
    ports:
      - "8000:8000"
    networks:
      - chat-gft_network
    restart: unless-stopped

volumes:
  postgres_data:
  minio_data:

networks:
  chat-gft_network:
    driver: bridge