#!/bin/bash

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
HEALTH_CHECK_URL="${HEALTH_CHECK_URL:-https://chatGFT.pro/api/health}"
HEALTH_CHECK_TIMEOUT=30
ROLLBACK_ON_FAILURE=true

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
check_health() {
    local service=$1
    local max_attempts=15
    local attempt=1
    
    echo -e "${YELLOW}üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞ ${service}...${NC}"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞
    local container_name=""
    case $service in
        backend)
            container_name="gft_backend"
            health_url="http://localhost:5000/api/health"
            ;;
        frontend)
            container_name="gft_frontend"
            health_url="http://localhost/"
            ;;
        llm_service)
            container_name="gft_llm_service"
            # –î–ª—è LLM –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –ª–æ–≥–∏, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç wget/curl –≤ slim –æ–±—Ä–∞–∑–µ
            ;;
        *)
            container_name="gft_backend"
            health_url="http://localhost:5000/api/health"
            ;;
    esac
    
    while [ $attempt -le $max_attempts ]; do
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
        if ! docker ps | grep -q "${container_name}"; then
            echo -e "${RED}‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${container_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!${NC}"
            docker logs "${container_name}" --tail 30 2>/dev/null || true
            return 1
        fi
        
        # –î–ª—è LLM service –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –ª–æ–≥–∏ (–Ω–µ—Ç wget/curl –≤ slim –æ–±—Ä–∞–∑–µ)
        if [ "$service" = "llm_service" ]; then
            if docker logs "${container_name}" 2>&1 | grep -q "Uvicorn running\|Application startup complete\|started server process"; then
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
                if ! docker logs "${container_name}" --tail 20 2>&1 | grep -qi "error\|fatal\|failed\|exception"; then
                    echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å ${service} –∑–¥–æ—Ä–æ–≤!${NC}"
                    return 0
                fi
            fi
        else
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ wget/curl
            if docker exec "${container_name}" sh -c "command -v wget >/dev/null 2>&1 && wget -q --spider ${health_url} 2>/dev/null || command -v curl >/dev/null 2>&1 && curl -f -s ${health_url} >/dev/null 2>&1" 2>/dev/null; then
                echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å ${service} –∑–¥–æ—Ä–æ–≤!${NC}"
                return 0
            fi
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ª–æ–≥–∏ –¥–ª—è backend/frontend
            if docker logs "${container_name}" 2>&1 | grep -q "Server started\|started on port\|listening\|nginx"; then
                if ! docker logs "${container_name}" --tail 20 2>&1 | grep -qi "error\|fatal\|failed"; then
                    echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å ${service} –∑–¥–æ—Ä–æ–≤!${NC}"
                    return 0
                fi
            fi
        fi
        
        echo -e "${YELLOW}‚è≥ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${max_attempts}...${NC}"
        sleep 3
        attempt=$((attempt + 1))
    done
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
    echo -e "${RED}‚ùå –°–µ—Ä–≤–∏—Å ${service} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç! –õ–æ–≥–∏:${NC}"
    docker logs "${container_name}" --tail 50 2>/dev/null || true
    
    echo -e "${RED}‚ùå –°–µ—Ä–≤–∏—Å ${service} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç!${NC}"
    return 1
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–∞—Ç–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å)
rollback() {
    local service=$1
    
    echo -e "${RED}üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–∫–∞—Ç —Å–µ—Ä–≤–∏—Å–∞ ${service}...${NC}"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    local container_name=""
    case $service in
        backend) container_name="gft_backend" ;;
        frontend) container_name="gft_frontend" ;;
        llm_service) container_name="gft_llm_service" ;;
    esac
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if [ -n "$container_name" ]; then
        echo -e "${YELLOW}üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ${container_name}...${NC}"
        docker compose stop ${service} 2>/dev/null || true
        docker compose rm -f ${service} 2>/dev/null || true
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—Ä–∞–∑ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        local image_name=$(docker images --format "{{.Repository}}" | grep -E "chat-gft-deploy-${service}|gft_${service}" | head -1)
        if [ -n "$image_name" ] && docker images | grep -q "${image_name}-previous"; then
            echo -e "${YELLOW}üì¶ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—Ä–∞–∑...${NC}"
            docker tag "${image_name}-previous" "${image_name}" 2>/dev/null || true
            docker compose up -d ${service}
        fi
    else
        # –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ (fallback)
        echo -e "${YELLOW}‚ö†Ô∏è  –°–µ—Ä–≤–∏—Å –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ...${NC}"
        docker compose down
    fi
    
    echo -e "${RED}‚ùå –û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è ${service}.${NC}"
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –æ–±—Ä–∞–∑–æ–≤
save_current_images() {
    echo -e "${YELLOW}üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –æ–±—Ä–∞–∑—ã...${NC}"
    
    # –¢–µ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –æ–±—Ä–∞–∑—ã –∫–∞–∫ previous
    docker images --format "{{.Repository}}:{{.Tag}}" | grep "gft_" | while read image; do
        if [[ ! "$image" == *"previous"* ]]; then
            docker tag "$image" "${image}-previous" 2>/dev/null || true
        fi
    done
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ø–ª–æ—è
deploy() {
    local service=$1
    
    echo -e "${GREEN}üöÄ –ù–∞—á–∏–Ω–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ ${service}...${NC}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –æ–±—Ä–∞–∑—ã
    save_current_images
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    if [ ! -f .env ]; then
        echo -e "${RED}‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!${NC}"
        exit 1
    fi
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —Å–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    echo -e "${YELLOW}üî® –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã...${NC}"
    if ! docker compose build --no-cache ${service}; then
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏!${NC}"
        exit 1
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    echo -e "${YELLOW}üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...${NC}"
    if ! docker compose up -d ${service}; then
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞!${NC}"
        rollback "${service}"
        exit 1
    fi
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    echo -e "${YELLOW}‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
    sleep 15
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
    if ! check_health "${service}"; then
        echo -e "${RED}‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞!${NC}"
        if [ "$ROLLBACK_ON_FAILURE" = true ]; then
            rollback "${service}"
        fi
        exit 1
    fi
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    echo -e "${YELLOW}üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã...${NC}"
    docker image prune -f
    
    echo -e "${GREEN}‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${NC}"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    docker compose ps
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ $# -eq 0 ]; then
    # –î–µ–ø–ª–æ–π –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    deploy ""
else
    # –î–µ–ø–ª–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    deploy "$1"
fi